1.
import java.util.Scanner;
public class ArrayInput {
public static void main(String[] args) {
Scanner sc = new Scanner(System.in);
System.out.println("Enter the size of the array: ");
int n = sc.nextInt();
int arr[] = new int[n];
for(int i=0;i<n;i++)
{
System.out.println("Please Enter " + (i+1) + "elements: ");
arr[i] = sc.nextInt();
}
System.out.println("Array is: ");
for(int i=0;i<n;i++)
{
System.out.println(arr[i] + " ");
}
sc.close();
}
}




2.
public class TimeComplexity {
static boolean isPrimeRam(int n)
{
if(n<=1) 
return false;
if(n==2) 
return true;
for(int i=2;i<Math.sqrt(n);i++)
{
if(n%i == 0) 
return false;
}
return true;
}
public static void main(String[] args) {
int n = 100;
long start = System.currentTimeMillis(); 
System.out.println(isPrimeRam(n));
long end = System.currentTimeMillis();
System.out.println("Time by Ram's apporach : " + (end-start));
start = System.currentTimeMillis();
System.out.println(isPrimeRam(n));
end = System.currentTimeMillis();
System.out.println("Time by Ram's apporach : " + (end-start));
}
}
3.
public class SelectionSort {
public static void main(String[] args)
{
int arr[] = {3,7,10,11,4,1};
int n = arr.length;
for(int i=0;i<n-1;i++)
{
int minIndex = 1;
for(int j = i+1;j<n;j++)
{
if(arr[j]<arr[minIndex])
{
minIndex = j;
}
}
int temp = arr[i];
arr[i] = arr[minIndex];
arr[minIndex] = temp;
}
for(int i = 0;i<n;i++)
{
System.out.println(arr[i]+ " ");
}
System.out.println();
}
}
4.
public class StringStudy {
public static void main(String[] args)
{
String name = "Cipherschools";
String name2 = "Cipherschools";
String name3 = new String("Cipherschools");
String name4 = new String("Cipherschools");
System.out.println(name==name2);
System.out.println(name3==name4);
System.out.println(name==name3);
System.out.println("=====================================");
System.out.println("1. CONCATENATION");
String s1 = "Hello";
s1 = s1 + "Peeps";
System.out.println(s1);
System.out.println(s1 + " How are u doing?");
System.out.println(s1);
String s2 = new String("Hello");
String s3 = new String("People");
String s4 = s2.concat(s3);
System.out.println(s4);
System.out.println(s2);
}
}
5.
public class StringStudy1 {
public static void main(String[] args)
{
String name = "Cipherschools";
String name2 = "Cipherschools";
String name3 = new String("Cipherschools");
String name4 = new String("Cipherschools");
System.out.println(name==name2);
System.out.println(name3==name4);
System.out.println(name==name3);
System.out.println("=====================================");
System.out.println("1. CONCATENATION");
String s1 = "Hello";
s1 = s1 + "Peeps";
System.out.println(s1);
System.out.println(s1 + " How are u doing?");
System.out.println(s1);
String s2 = new String("Hello");
String s3 = new String("People");
String s4 = s2.concat(s3);
System.out.println(s4);
System.out.println(s2);
System.out.println("=====================================");
System.out.println("1: Checking IF STRINGS ARE EQUAL IN VALUE");
System.out.println(name.equals(name2));
System.out.println(name.equals(name3));
System.out.println("=====================================");
System.out.println("3: Creating new String object from character array");
char arr[] = {'c','I','P','H','E','R'};
String strFromArr = new String(arr);
System.out.println(strFromArr);
}
}
6.
import java.util.Scanner;
public class StringStudy2 {
public static void main(String[] args)
{
String name = "Cipherschools";
String name2 = "Cipherschools";
String name3 = new String("Cipherschools");
String name4 = new String("Cipherschools");
System.out.println(name==name2);
System.out.println(name3==name4);
System.out.println(name==name3);
System.out.println("=====================================");
System.out.println("1. CONCATENATION");
String s1 = "Hello";
s1 = s1 + "Peeps";
System.out.println(s1);
System.out.println(s1 + " How are u doing?");
System.out.println(s1);
String s2 = new String("Hello");
String s3 = new String("People");
String s4 = s2.concat(s3);
System.out.println(s4);
System.out.println(s2);
System.out.println("=====================================");
System.out.println("1: Checking IF STRINGS ARE EQUAL IN VALUE");
System.out.println(name.equals(name2));
System.out.println(name.equals(name3));
System.out.println("=====================================");
System.out.println("3: Creating new String object from character array");
char arr[] = {'C','I','P','H','E','R'};
String strFromArr = new String(arr);
System.out.println(strFromArr);
System.out.println("=====================================");
System.out.println("4: Creating partial String object from character array");
String partialstrFromArr2 = new String(arr, 2,3);
System.out.println(partialstrFromArr2);
System.out.println("==============================");
System.out.println("5. Changing the case");
System.out.println(name.toLowerCase());
System.out.println(name.toUpperCase());
name = name.toUpperCase();
System.out.println(name);
System.out.println("==============================");
System.out.println("6.Splitting");
System.out.println("Please Enter your Full Name: ");
Scanner sc = new Scanner(System.in);
String fullName = sc.nextLine();
String strArr[] = fullName.split(" ");
for(int i = 0;i<strArr.length;i++)
{
System.out.println(strArr[i]);
}
System.out.println("Please Enter Something seprerated by comas: ");
String csvText = sc.nextLine();
String csvArr[] = fullName.split(" ");
for(int i = 0;i<csvArr.length;i++)
{
System.out.println(csvArr[i]);
}
System.out.println("Please Enter Something seprerated by dots: ");
String dotText = sc.nextLine();
String dotArr[] = csvText.split("[.]");
for(int i = 0;i<dotArr.length;i++)
{
System.out.println(dotArr[i]);
}
String backslashText = ("Hello i attended \"java\" class");
String backslashArr[] = csvText.split("[.]");
for(int i = 0;i<backslashArr.length;i++)
{
System.out.println(backslashArr[i]);
}
}
}
7.
import java.util.Scanner;
public class StringStudy3 {
public static void main(String[] args)
{
String name = "Cipherschools";
String name2 = "Cipherschools";
String name3 = new String("Cipherschools");
String name4 = new String("Cipherschools");
System.out.println(name==name2);
System.out.println(name3==name4);
System.out.println(name==name3);
System.out.println("=====================================");
System.out.println("1. CONCATENATION");
String s1 = "Hello";
s1 = s1 + "Peeps";
System.out.println(s1);
System.out.println(s1 + " How are u doing?");
System.out.println(s1);
String s2 = new String("Hello");
String s3 = new String("People");
String s4 = s2.concat(s3);
System.out.println(s4);
System.out.println(s2);
System.out.println("=====================================");
System.out.println("1: Checking IF STRINGS ARE EQUAL IN VALUE");
System.out.println(name.equals(name2));
System.out.println(name.equals(name3));
System.out.println("=====================================");
System.out.println("3: Creating new String object from character array");
char arr[] = {'C','I','P','H','E','R'};
String strFromArr = new String(arr);
System.out.println(strFromArr);
System.out.println("=====================================");
System.out.println("4: Creating partial String object from character array");
String partialstrFromArr2 = new String(arr, 2,3);
System.out.println(partialstrFromArr2);
System.out.println("==============================");
System.out.println("5. Changing the case");
System.out.println(name.toLowerCase());
System.out.println(name.toUpperCase());
name = name.toUpperCase();
System.out.println(name);
System.out.println("==============================");
System.out.println("6.Splitting");
System.out.println("Please Enter your Full Name: ");
Scanner sc = new Scanner(System.in);
String fullName = sc.nextLine();
String strArr[] = fullName.split(" ");
for(int i = 0;i<strArr.length;i++)
{
System.out.println(strArr[i]);
}
System.out.println("Please Enter Something seprerated by comas: ");
String csvText = sc.nextLine();
String csvArr[] = fullName.split(" ");
for(int i = 0;i<csvArr.length;i++)
{
System.out.println(csvArr[i]);
}
System.out.println("Please Enter Something seprerated by dots: ");
String dotText = sc.nextLine();
String dotArr[] = csvText.split("[.]");
for(int i = 0;i<dotArr.length;i++)
{
System.out.println(dotArr[i]);
}
String backslashText = ("Hello i attended \"java\" class");
String backslashArr[] = csvText.split("[.]");
for(int i = 0;i<backslashArr.length;i++)
{
System.out.println(backslashArr[i]);
}
System.out.println("==============================");
System.out.println("7. Length of String");
int len = name.length();
System.out.println("Length of : " + name + " is " + len);
System.out.println("==============================");
System.out.println("7. Finding Index of a char in a string");
int index = name.indexOf('e');
System.out.println("index of e in : " + name + " is : " + index);
int index2 = name.indexOf('E');
System.out.println("index of e in : " + name + " is : " + index2);
int index3 = name.indexOf("School");
System.out.println("index of school in : " + name + " is : " + index3);
int index4 = name.indexOf('o',10);
System.out.println("index of e in : " + name + " is : " + index4);
int indexOfO=0;
while(true)
{
indexOfO = name.indexOf('o', indexOfO + 1);
if(indexOfO == -1) break;
System.out.println("O found at : " + indexOfO);
}
}
}
8.
import java.util.Scanner;
public class StringStudy4 {
public static void main(String[] args)
{
String name = "Cipherschools";
String name2 = "Cipherschools";
String name3 = new String("Cipherschools");
String name4 = new String("Cipherschools");
System.out.println(name==name2);
System.out.println(name3==name4);
System.out.println(name==name3);
System.out.println("=====================================");
System.out.println("1. CONCATENATION");
String s1 = "Hello";
s1 = s1 + "Peeps";
System.out.println(s1);
System.out.println(s1 + " How are u doing?");
System.out.println(s1);
String s2 = new String("Hello");
String s3 = new String("People");
String s4 = s2.concat(s3);
System.out.println(s4);
System.out.println(s2);
System.out.println("=====================================");
System.out.println("1: Checking IF STRINGS ARE EQUAL IN VALUE");
System.out.println(name.equals(name2));
System.out.println(name.equals(name3));
System.out.println("=====================================");
System.out.println("3: Creating new String object from character array");
char arr[] = {'C','I','P','H','E','R'};
String strFromArr = new String(arr);
System.out.println(strFromArr);
System.out.println("=====================================");
System.out.println("4: Creating partial String object from character array");
String partialstrFromArr2 = new String(arr, 2,3);
System.out.println(partialstrFromArr2);
System.out.println("==============================");
System.out.println("5. Changing the case");
System.out.println(name.toLowerCase());
System.out.println(name.toUpperCase());
name = name.toUpperCase();
System.out.println(name);
System.out.println("==============================");
System.out.println("6.Splitting");
System.out.println("Please Enter your Full Name: ");
Scanner sc = new Scanner(System.in);
String fullName = sc.nextLine();
String strArr[] = fullName.split(" ");
for(int i = 0;i<strArr.length;i++)
{
System.out.println(strArr[i]);
}
System.out.println("Please Enter Something seprerated by comas: ");
String csvText = sc.nextLine();
String csvArr[] = fullName.split(" ");
for(int i = 0;i<csvArr.length;i++)
{
System.out.println(csvArr[i]);
}
System.out.println("Please Enter Something seprerated by dots: ");
String dotText = sc.nextLine();
String dotArr[] = csvText.split("[.]");
for(int i = 0;i<dotArr.length;i++)
{
System.out.println(dotArr[i]);
}
String backslashText = ("Hello i attended \"java\" class");
String backslashArr[] = csvText.split("[.]");
for(int i = 0;i<backslashArr.length;i++)
{
System.out.println(backslashArr[i]);
}
System.out.println("==============================");
System.out.println("7. Length of String");
int len = name.length();
System.out.println("Length of : " + name + " is " + len);
System.out.println("==============================");
System.out.println("7. Finding Index of a char in a string");
int index = name.indexOf('e');
System.out.println("index of e in : " + name + " is : " + index);
int index2 = name.indexOf('E');
System.out.println("index of e in : " + name + " is : " + index2);
int index3 = name.indexOf("School");
System.out.println("index of school in : " + name + " is : " + index3);
int index4 = name.indexOf('o',10);
System.out.println("index of e in : " + name + " is : " + index4);
int indexOfO=0;
while(true)
{
indexOfO = name.indexOf('o', indexOfO + 1);
if(indexOfO == -1) break;
System.out.println("O found at : " + indexOfO);
}
System.out.println("==============================");
System.out.println("9. Extract a Substring");
String wf = "Wakanda Forever";
String subString = wf.substring(3);
System.out.println(subString);
String subString2 = wf.substring(3,7);
System.out.println(subString2);
System.out.println("==============================");
System.out.println("10. Finding a character at a given index");
System.out.println(name.charAt(4));
char charAtIndex = name.charAt(6);
System.out.println(charAtIndex);
System.out.println("==============================");
System.out.println("11. char Array from a string");
char arr2[] = name.toCharArray();
for(int i = 0;i<arr2.length;i++)
{
System.out.println(arr2[i]);
}
System.out.println("==============================");
System.out.println("12.Check if a string is empty");
String emptyString = new String();
String emptyString2 = " ";
System.out.println(emptyString);
System.out.println(emptyString2);
System.out.println(emptyString.equals((" ")));
System.out.println(emptyString2.equals((" ")));
System.out.println(emptyString.isEmpty());
System.out.println(emptyString2.isEmpty());
System.out.println(emptyString.isEmpty());
System.out.println(emptyString.isBlank());
System.out.println("==============================");
System.out.println("13. Comparing strings lexicographically -> alphabatically");
String textOne = "QHey!";
String textTwo = "QBey";
System.out.println(textOne.compareTo(textTwo));
System.out.println(textTwo.compareTo(textTwo));
System.out.println(textOne.compareTo(textTwo));
System.out.println("==============================");
System.out.println("14, Trimming and Spaces fromm front and end");
String s5 = new String("Hello ");
String s6 = new String(" Hello ");
String s7 = new String(" Hello People ");
System.out.println("*" + s5.trim() + "*");
System.out.println("*" + s6.trim() + "*");
System.out.println("*" + s7.trim() + "*");
System.out.println("==============================");
System.out.println("15. Replacing a character");
System.out.println(name.replace('o', '0'));
System.out.println(name.replace("oo", "000"));
sc.close();
}
}

9.
public class RecursionStudy {
static void printDescending(int n)
{
if(n<1) return;
System.out.println(n);
printDescending(n-1);
}
public void main(String[] args) {
int n = 5;
printDescending(n);
}
}

10.
public class FibonacciSeries {
static int fib(int n)
{
if(n<2) return n;
int a = fib(n-1);
int b = fib(n-2);
return a + b;
}
public static void main(String[] args) {
int n =4;
System.out.println(fib(n));
}
}
11.
package Recursion;
public class BinarySearchWithoutRecursion {
public static void main(String[] args) {
int arr[] = {2,5,8,12,16,23,38,56,72};
int x = 16;
// x=10;
int l =0;
int r =arr.length-1;
while(l<=r)
{
int mid = (l+r)/2;
if(arr[mid] == x)
{
System.out.println("Value found at index: " + mid);
return;
}
else if(x<arr[mid])
{
r = mid-1;
} else
{
r = mid+1;
}
}
System.out.println("Value not found");
}
}

12.
import java.util.ArrayList;
public class MaxSumSubArray{
public static int max_sum_of_subarray(int arr[], int n, int k)
{
int max_sum = 0;
for (int i = 0; i + k <= n; i++) {
int temp = 0;
for (int j = i; j < i + k; j++) {
temp += arr[j];
}
if (temp > max_sum)
max_sum = temp;
}
return max_sum;
}
public static void main(String[] args)
{
int arr[] = { 1, 4, 2, 10, 2, 3, 1, 0, 20 };
int k = 4;
int n = arr.length;
// by brute force
int max_sum = max_sum_of_subarray(arr, n, k);
System.out.println(max_sum);
}
}
13.
public class TwoPointerConcept {
public static void main(String[] args) {
int arr[] = {10,20,35,50,75,80};
int x = 95;
int l =0;
int r = arr.length -1;
while(l<r)
{
int sum = arr[l] + arr[r];
if(sum==x)
{
System.out.println("Found " + x + " as sun of values on index: " + l + " and indes " + r);
return;
}
else if(sum<x)
{
l++;
}
else
{
r--;
}
}
System.out.println("Sum not found.");
}
}

14.
public class ReverseString {
public static void main(String[]args)
{
String s1 = "CipherSchools";
int n = s1.length();
char arr[] = new char[n];
for(int i=0;i<n;i++)
{
arr[i] = s1.charAt(n-1-i);
}
String rev = new String(arr);
System.out.println(rev);
String res = new String();
for(int i=n-1;i>=0;i--)
{
res = res + s1.charAt(i);
}
System.out.println(res);
char strArr[] = s1.toCharArray();
int l = 0;
int r = n-1;
while(l<r)
{
char temp = strArr[l];
strArr[l] = strArr[r];
strArr[r] = temp;
l++;
r--;
}
String result = new String(strArr);
System.out.println(result);
}
}

15.
public class CheckPalidrome {
static boolean checkPalidrome(String s)
{
int l = 0;
int r = s.length() - 1;
while(l<r)
{
if(s.charAt(l) != s.charAt(r)) {
return false;
}
l++;
r--;
}
return true;
}
public static void main(String[] args)
{
String s = "MADAM";
String s1 = "CIPHER";
String s2 = "Madam";
System.out.println(checkPalidrome(s));
System.out.println(checkPalidrome(s1));
System.out.println(checkPalidrome(s2));
}
}

16.
public class Anagram {
static boolean isAnagram(String s1, String s2)
{
if(s1.length() != s2.length()) return false;
s1 = s1.toLowerCase();
s2 = s2.toLowerCase();
int n = s1.length();
int freqArr1[] = new int[256];
int freqArr2[] = new int[256];
for(int i =0;i<n;i++)
{
int index1 = s1.charAt(i) - 'a';
freqArr1[index1]++;
int index2 = s2.charAt(i)-'a';
freqArr2[index2]++;
}
for(int i=0;i<26;i++)
{
if(freqArr1[i]!=freqArr2[i])
{
return false;
}
}
return true;
}
public static void main(String[] args) {
System.out.println(isAnagram("MAT","tac"));
}
}

17.
class Node{
int data;
Node next;
Node(int data)
{
this.data = data;
this.next = null;
}
}
public class MyList {
static void print(Node head) {
while(head != null)
{
System.out.print(head.data + " ");
head = head.next;
}
System.out.println();
}
public static void main(String[] args) {
Node head = new Node(5);
Node second = new Node(6);
head.next = second;
Node third = new Node(7);
second.next = third;
Node fourth = new Node(8);
third.next = fourth;
Node fifth = new Node(9);
fourth.next = fifth;
// System.out.println(head.data);
// System.out.println(head.next.data);
// System.out.println(head.next.next.data);
// System.out.println(head.next.next.next.data);
// System.out.println(head.next.next.next.next.data);
while(head != null)
{
System.out.println(head.data);
head = head.next;
}
System.out.println(head);
print(head);
print(head);
}
}

18.
class Node1{
int data;
Node1 next;
Node1(int data)
{
this.data = data;
this.next = null;
}
}
public class MyList1 {
static void print(Node1 head) {
while(head != null)
{
System.out.print(head.data + " ");
head = head.next;
}
System.out.println();
}
static Node1 insertAtHead(Node1 head, int data)
{
Node1 temp = new Node1(data);
temp.next = head;
head = temp;
return head;
}
static Node1 insertAtEnd(Node1 head, int data)
{
if(head == null) return new Node1(data);
Node1 temp = new Node1(data);
// temp.next = head;
Node1 last = head;
while(last.next != null) 
{
last = last.next;
}
last.next = temp;
return head;
}
public static void main(String[] args) {
Node1 head = new Node1(5);
Node1 second = new Node1(6);
head.next = second;
Node1 third = new Node1(7);
second.next = third;
Node1 fourth = new Node1(8);
third.next = fourth;
Node1 fifth = new Node1(9);
fourth.next = fifth;
// System.out.println(head.data);
// System.out.println(head.next.data);
// System.out.println(head.next.next.data);
// System.out.println(head.next.next.next.data);
// System.out.println(head.next.next.next.next.data);
while(head != null)
{
System.out.println(head.data);
head = head.next;
}
System.out.println(head);
print(head);
print(head);
insertAtHead(head, 4);
print(head);
head = insertAtEnd(head, 10);
}
}
19.
class Node2{
int data;
Node2 next;
Node2(int data)
{
this.data = data;
this.next = null;
}
}
public class LinkedList2 {
static void print(Node2 head) {
while(head != null)
{
System.out.print(head.data + " ");
head = head.next;
}
System.out.println();
}
static Node2 insertAtHead(Node2 head, int data)
{
Node2 temp = new Node2(data);
temp.next = head;
head = temp;
return head;
}
static Node2 insertAtEnd(Node2 head, int data)
{
if(head == null) return new Node2(data);
Node2 temp = new Node2(data);
// temp.next = head;
Node2 last = head;
while(last.next != null) 
{
last = last.next;
}
last.next = temp;
return head;
}
static Node2 deleteLinkedList2(Node2 head)
{
return null;
}
static Node2 deleteFromHead(Node2 head)
{
if(head == null) {
System.out.println("Empty LL!! Nothing to delete");
return null;
}
return head.next;
}
public static void main(String[] args) {
Node2 head = new Node2(5);
Node2 second = new Node2(6);
head.next = second;
Node2 third = new Node2(7);
second.next = third;
Node2 fourth = new Node2(8);
third.next = fourth;
Node2 fifth = new Node2(9);
fourth.next = fifth;
// System.out.println(head.data);
// System.out.println(head.next.data);
// System.out.println(head.next.next.data);
// System.out.println(head.next.next.next.data);
// System.out.println(head.next.next.next.next.data);
while(head != null)
{
System.out.println(head.data);
head = head.next;
}
System.out.println(head);
print(head);
print(head);
head = insertAtHead(head, 4);
print(head);
head = insertAtEnd(head, 10);
print(head);
Node2 head2 = insertAtEnd(null, 1);
print(head2);
head2 = deleteLinkedList2(head2);
print(head2);
head2 = insertAtEnd(null, 1);
print(head2);
head2 = deleteFromHead(head2);
print(head2);
head2 = deleteFromHead(head2);
}
}

20.
class Node3{
int data;
Node3 next;
Node3(int data)
{
this.data = data;
this.next = null;
}
}
public class LinkedList3 {
static void print(Node3 head) {
while(head != null)
{
System.out.print(head.data + " ");
head = head.next;
}
System.out.println();
}
static Node3 insertAtHead(Node3 head, int data)
{
Node3 temp = new Node3(data);
temp.next = head;
head = temp;
return head;
}
static Node3 insertAtEnd(Node3 head, int data)
{
if(head == null) return new Node3(data);
Node3 temp = new Node3(data);
// temp.next = head;
Node3 last = head;
while(last.next != null) 
{
last = last.next;
}
last.next = temp;
return head;
}
static Node3 deleteLinkedList3(Node3 head)
{
return null;
}
static Node3 deleteFromHead(Node3 head)
{
if(head == null) {
System.out.println("Empty LL!! Nothing to delete");
return null;
}
return head.next;
}
static void findMiddleElement(Node3 head)
{
int len = 0;
Node3 temp = head;
while(temp!=null)
{
temp = temp.next;
len++;
}
temp = head;
for(int i=0;i<len/2;i++)
{
temp = temp.next;
}
System.out.println(temp.data);
}
static void findMiddleElementOld(Node3 head)
{
Node3 slow = head;
Node3 fast = head;
while(fast.next!=null && fast.next!=null)
{
fast = fast.next.next;
slow = slow.next;
}
System.out.println(slow.data);
} 
public static void main(String[] args) {
Node3 head = new Node3(5);
Node3 second = new Node3(6);
head.next = second;
Node3 third = new Node3(7);
second.next = third;
Node3 fourth = new Node3(8);
third.next = fourth;
Node3 fifth = new Node3(9);
fourth.next = fifth;
// System.out.println(head.data);
// System.out.println(head.next.data);
// System.out.println(head.next.next.data);
// System.out.println(head.next.next.next.data);
// System.out.println(head.next.next.next.next.data);
while(head != null)
{
System.out.println(head.data);
head = head.next;
}
System.out.println(head);
print(head);
print(head);
head = insertAtHead(head, 4);
print(head);
head = insertAtEnd(head, 10);
print(head);
Node3 head2 = insertAtEnd(null, 1);
print(head2);
head2 = deleteLinkedList3(head2);
print(head2);
head2 = insertAtEnd(null, 1);
print(head2);
head2 = deleteFromHead(head2);
print(head2);
head2 = deleteFromHead(head2);
findMiddleElement(head);
head = insertAtEnd(head, 11);
print(head);
findMiddleElement(head);
findMiddleElementOld(head);
}
}
21.
import java.util.*;
// class definition of the ListNode
public class RemoveLoop{
public int val;
public RemoveLoop next;
public RemoveLoop(int value){
val = value;
next = null;
}
// function to remove loop in linked list using hashing
public static void removeLoopUsingHashing(RemoveLoop head){
HashMap<RemoveLoop,Boolean> visited = new HashMap<RemoveLoop,Boolean>();
RemoveLoop temp = head; // an iterator to iterate the linked list
while (temp != null && temp.next != null && !visited.containsKey(temp.next)){
visited.put(temp, true);
temp = temp.next;
}
if (temp == null || temp.next == null){
// this means that loop is not present in the linked list
System.out.print("Loop is absent in the linked list");
System.out.print("\n");
}
else{
// the node temp->next is the starting of the loop in the linked list
// hence, we can set temp->next = NULL to remove the loop in the linked list
System.out.print("Loop found, loop is starting from the node: ");
System.out.print(temp.val);
System.out.print("\n");
temp.next = null;
System.out.print("Loop as been removed in the linked list");
System.out.print("\n");
}
}
}
22.
import java.util.*;
// class definition of the ListNode
public class RemoveLoop{
public int val;
public RemoveLoop next;
public RemoveLoop(int value){
val = value;
next = null;
}
// function to remove loop in linked list using hashing
public static void removeLoopUsingHashing(RemoveLoop head){
HashMap<RemoveLoop,Boolean> visited = new HashMap<RemoveLoop,Boolean>();
RemoveLoop temp = head; // an iterator to iterate the linked list
while (temp != null && temp.next != null && !visited.containsKey(temp.next)){
visited.put(temp, true);
temp = temp.next;
}
if (temp == null || temp.next == null){
// this means that loop is not present in the linked list
System.out.print("Loop is absent in the linked list");
System.out.print("\n");
}
else{
// the node temp->next is the starting of the loop in the linked list
// hence, we can set temp->next = NULL to remove the loop in the linked list
System.out.print("Loop found, loop is starting from the node: ");
System.out.print(temp.val);
System.out.print("\n");
temp.next = null;
System.out.print("Loop as been removed in the linked list");
System.out.print("\n");
}
}
}
23.
// Recursive Java program to reverse
// a linked list
import java.io.*;
class ReverseLinkedList {
static Node head; // head of list
static class Node {
int data;
Node next;
Node(int d)
{
data = d;
next = null;
}
}
static Node reverse(Node head)
{
if (head == null || head.next == null)
return head;
/* reverse the rest list and put
the first element at the end */
Node rest = reverse(head.next);
head.next.next = head;
/* tricky step -- see the diagram */
head.next = null;
/* fix the head pointer */
return rest;
}
/* Function to print linked list */
static void print()
{
Node temp = head;
while (temp != null) {
System.out.print(temp.data + " ");
temp = temp.next;
}
System.out.println();
}
static void push(int data)
{
Node temp = new Node(data);
temp.next = head;
head = temp;
}
/* Driver program to test above function*/
public static void main(String args[])
{
/* Start with the empty list */
push(20);
push(4);
push(15);
push(85);
System.out.println("Given linked list");
print();
head = reverse(head);
System.out.println("Reversed linked list");
print();
}
}
// This code is contributed by Prakhar Agarwal

24.
public class YshapeLinkedList 
{ 
// h1 is the head node of the first linked list 
// h2 is the head node of the second linked list 
static LinkedListNode h1, h2; 
static class LinkedListNode 
{ 
int d; 
LinkedListNode nxt; 
LinkedListNode(int d) 
{ 
this.d = d; 
nxt = null; 
} 
} 
// method for getting the point of intersection of two linked 
// lists l1 and l2 
int getIntesectionNode(LinkedListNode l1, LinkedListNode l2) 
{ 
while(l1 != null) 
{ 
// for each iteration of the outer loop 
// iterate nodes of the linked list l2 
// where there is a match just return the value 
LinkedListNode curr2 = l2; 
while(curr2 != null) 
{ 
if(l1.d == curr2.d) 
{ 
return l1.d; 
} 
curr2 = curr2.nxt; 
} 
l1 = l1.nxt; 
} 
// returning -1 means the intersection point of 
// the given two linked lists do not exist 
return -1; 
} 
void displayNodes(LinkedListNode l1) 
{ 
while(l1 != null) 
{ 
System.out.print(l1.d + " "); 
l1 = l1.nxt; 
} 
} 
// main method 
public static void main(String[] args) 
{ 
// creating an object of the class LinkedListIntersection 
YshapeLinkedList lst = new YshapeLinkedList(); 
// creating the first linked list 
lst.h1 = new LinkedListNode(113); 
lst.h1.nxt = new LinkedListNode(116); 
lst.h1.nxt.nxt = new LinkedListNode(119); 
lst.h1.nxt.nxt.nxt = new LinkedListNode(115); 
lst.h1.nxt.nxt.nxt.nxt = new LinkedListNode(130); 
System.out.println("The first linked list is: "); 
lst.displayNodes(lst.h1); 
System.out.println(); 
// creating the second linked list 
lst.h2 = new LinkedListNode(110); 
lst.h2.nxt = new LinkedListNode(115); 
lst.h2.nxt.nxt = new LinkedListNode(130); 
System.out.println("The second linked list is: "); 
lst.displayNodes(lst.h2); 
System.out.println(); 
System.out.println("The first intersection point of the linked lists is: " + lst.getIntesectionNode(lst.h1, lst.h2)); 
} 
} 
25.
import java.util.*;
class DetectAndRemoveLL {
static Node6 head;
static class Node6 {
int data;
Node6 next;
Node6(int d)
{
data = d;
next = null;
}
}
static public void push(int new_data)
{
Node6 new_node = new Node6(new_data);
new_node.next = head;
head = new_node;
}
void printList(Node6 node)
{
while (node != null) {
System.out.print(node.data + " ");
node = node.next;
}
}
static boolean removeLoop(Node6 h)
{
HashSet<Node6> s = new HashSet<Node6>();
Node6 prev = null;
while (h != null) {
if (s.contains(h)) {
prev.next = null;
return true;
}
else {
s.add(h);
prev = h;
h = h.next;
}
}
return false;
}
/* Driver program to test above function */
public static void main(String[] args)
{
DetectAndRemoveLL llist = new DetectAndRemoveLL();
llist.push(20);
llist.push(4);
llist.push(15);
llist.push(10);
llist.head.next.next.next.next = llist.head;
if (removeLoop(head)) {
System.out.println("Linked List after removing loop");
llist.printList(head);
}
else
System.out.println("No Loop found");
}
}

26.
class LinkedList {
// create an object of Node class
// represent the head of the linked list
Node head;
// static inner class
static class Node {
int value;
// connect each node to next node
Node next;
Node(int d) {
value = d;
next = null;
}
}
// check if loop is present
public boolean checkLoop() {
// create two references at start of LinkedList
Node first = head;
Node second = head;
while(first != null && first.next !=null) {
// move first reference by 2 nodes
first = first.next.next;
// move second reference by 1 node
second = second.next;
// if two references meet
// then there is a loop
if(first == second) {
return true;
}
}
return false;
}
public class DetectLoopLL{
public static void main(String[] args) {
// create an object of LinkedList
LinkedList linkedList = new LinkedList();
// assign values to each linked list node
linkedList.head = new Node(1);
Node second = new Node(2);
Node third = new Node(3);
Node fourth = new Node(4);
// connect each node of linked list to next node
linkedList.head.next = second;
second.next = third;
third.next = fourth;
// make loop in LinkedList
fourth.next = second;
// printing node-value
System.out.print("LinkedList: ");
int i = 1;
while (i <= 4) {
System.out.print(linkedList.head.value + " ");
linkedList.head = linkedList.head.next;
i++;
}
// call method to check loop
boolean loop = linkedList.checkLoop();
if(loop) {
System.out.println("\nThere is a loop in LinkedList.");
}
else {
System.out.println("\nThere is no loop in LinkedList.");
}
}
}
}

27.
// Stack implementation in Java
class StackImplement {
// store elements of stack
private int arr[];
// represent top of stack
private int top;
// total capacity of the stack
private int capacity;
// Creating a stack
StackImplement(int size) {
// initialize the array
// initialize the stack variables
arr = new int[size];
capacity = size;
top = -1;
}
// push elements to the top of stack
public void push(int x) {
if (isFull()) {
System.out.println("Stack OverFlow");
// terminates the program
System.exit(1);
}
// insert element on top of stack
System.out.println("Inserting " + x);
arr[++top] = x;
}
// pop elements from top of stack
public int pop() {
// if stack is empty
// no element to pop
if (isEmpty()) {
System.out.println("STACK EMPTY");
// terminates the program
System.exit(1);
}
// pop element from top of stack
return arr[top--];
}
// return size of the stack
public int getSize() {
return top + 1;
}
// check if the stack is empty
public Boolean isEmpty() {
return top == -1;
}
// check if the stack is full
public Boolean isFull() {
return top == capacity - 1;
}
// display elements of stack
public void printStack() {
for (int i = 0; i <= top; i++) {
System.out.print(arr[i] + ", ");
}
}
public static void main(String[] args) {
StackImplement stack = new StackImplement(5);
stack.push(1);
stack.push(2);
stack.push(3);
System.out.print("Stack: ");
stack.printStack();
// remove element from stack
stack.pop();
System.out.println("\nAfter popping out");
stack.printStack();
}
}

